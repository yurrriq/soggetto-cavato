-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library for computer music research and education
--   
--   Euterpea is a domain-specific language embedded in Haskell for
--   computer music research, education, and development, providing both
--   note-level and signal-level abstractions. It is a descendant of
--   Haskore and HasSound, and is intended for both educational purposes as
--   well as serious computer music applications. Euterpea is a
--   wide-spectrum DSL, suitable for high-level music representation,
--   algorithmic composition, and analysis; mid-level concepts such as
--   MIDI; and low-level audio processing, sound synthesis, and instrument
--   design.
@package Euterpea
@version 2.0.2

module Euterpea.Music
type AbsPitch = Int
type Octave = Int
type Pitch = (PitchClass, Octave)
type Dur = Rational
data PitchClass
Cff :: PitchClass
Cf :: PitchClass
C :: PitchClass
Dff :: PitchClass
Cs :: PitchClass
Df :: PitchClass
Css :: PitchClass
D :: PitchClass
Eff :: PitchClass
Ds :: PitchClass
Ef :: PitchClass
Fff :: PitchClass
Dss :: PitchClass
E :: PitchClass
Ff :: PitchClass
Es :: PitchClass
F :: PitchClass
Gff :: PitchClass
Ess :: PitchClass
Fs :: PitchClass
Gf :: PitchClass
Fss :: PitchClass
G :: PitchClass
Aff :: PitchClass
Gs :: PitchClass
Af :: PitchClass
Gss :: PitchClass
A :: PitchClass
Bff :: PitchClass
As :: PitchClass
Bf :: PitchClass
Ass :: PitchClass
B :: PitchClass
Bs :: PitchClass
Bss :: PitchClass
data Primitive a
Note :: Dur -> a -> Primitive a
Rest :: Dur -> Primitive a
data Music a
Prim :: (Primitive a) -> Music a
(:+:) :: Music a -> Music a -> Music a
(:=:) :: Music a -> Music a -> Music a
Modify :: Control -> (Music a) -> Music a
data Control
Tempo :: Rational -> Control
Transpose :: AbsPitch -> Control
Instrument :: InstrumentName -> Control
Phrase :: [PhraseAttribute] -> Control
KeySig :: PitchClass -> Mode -> Control
Custom :: String -> Control
data Mode
Major :: Mode
Minor :: Mode
data InstrumentName
AcousticGrandPiano :: InstrumentName
BrightAcousticPiano :: InstrumentName
ElectricGrandPiano :: InstrumentName
HonkyTonkPiano :: InstrumentName
RhodesPiano :: InstrumentName
ChorusedPiano :: InstrumentName
Harpsichord :: InstrumentName
Clavinet :: InstrumentName
Celesta :: InstrumentName
Glockenspiel :: InstrumentName
MusicBox :: InstrumentName
Vibraphone :: InstrumentName
Marimba :: InstrumentName
Xylophone :: InstrumentName
TubularBells :: InstrumentName
Dulcimer :: InstrumentName
HammondOrgan :: InstrumentName
PercussiveOrgan :: InstrumentName
RockOrgan :: InstrumentName
ChurchOrgan :: InstrumentName
ReedOrgan :: InstrumentName
Accordion :: InstrumentName
Harmonica :: InstrumentName
TangoAccordion :: InstrumentName
AcousticGuitarNylon :: InstrumentName
AcousticGuitarSteel :: InstrumentName
ElectricGuitarJazz :: InstrumentName
ElectricGuitarClean :: InstrumentName
ElectricGuitarMuted :: InstrumentName
OverdrivenGuitar :: InstrumentName
DistortionGuitar :: InstrumentName
GuitarHarmonics :: InstrumentName
AcousticBass :: InstrumentName
ElectricBassFingered :: InstrumentName
ElectricBassPicked :: InstrumentName
FretlessBass :: InstrumentName
SlapBass1 :: InstrumentName
SlapBass2 :: InstrumentName
SynthBass1 :: InstrumentName
SynthBass2 :: InstrumentName
Violin :: InstrumentName
Viola :: InstrumentName
Cello :: InstrumentName
Contrabass :: InstrumentName
TremoloStrings :: InstrumentName
PizzicatoStrings :: InstrumentName
OrchestralHarp :: InstrumentName
Timpani :: InstrumentName
StringEnsemble1 :: InstrumentName
StringEnsemble2 :: InstrumentName
SynthStrings1 :: InstrumentName
SynthStrings2 :: InstrumentName
ChoirAahs :: InstrumentName
VoiceOohs :: InstrumentName
SynthVoice :: InstrumentName
OrchestraHit :: InstrumentName
Trumpet :: InstrumentName
Trombone :: InstrumentName
Tuba :: InstrumentName
MutedTrumpet :: InstrumentName
FrenchHorn :: InstrumentName
BrassSection :: InstrumentName
SynthBrass1 :: InstrumentName
SynthBrass2 :: InstrumentName
SopranoSax :: InstrumentName
AltoSax :: InstrumentName
TenorSax :: InstrumentName
BaritoneSax :: InstrumentName
Oboe :: InstrumentName
Bassoon :: InstrumentName
EnglishHorn :: InstrumentName
Clarinet :: InstrumentName
Piccolo :: InstrumentName
Flute :: InstrumentName
Recorder :: InstrumentName
PanFlute :: InstrumentName
BlownBottle :: InstrumentName
Shakuhachi :: InstrumentName
Whistle :: InstrumentName
Ocarina :: InstrumentName
Lead1Square :: InstrumentName
Lead2Sawtooth :: InstrumentName
Lead3Calliope :: InstrumentName
Lead4Chiff :: InstrumentName
Lead5Charang :: InstrumentName
Lead6Voice :: InstrumentName
Lead7Fifths :: InstrumentName
Lead8BassLead :: InstrumentName
Pad1NewAge :: InstrumentName
Pad2Warm :: InstrumentName
Pad3Polysynth :: InstrumentName
Pad4Choir :: InstrumentName
Pad5Bowed :: InstrumentName
Pad6Metallic :: InstrumentName
Pad7Halo :: InstrumentName
Pad8Sweep :: InstrumentName
FX1Train :: InstrumentName
FX2Soundtrack :: InstrumentName
FX3Crystal :: InstrumentName
FX4Atmosphere :: InstrumentName
FX5Brightness :: InstrumentName
FX6Goblins :: InstrumentName
FX7Echoes :: InstrumentName
FX8SciFi :: InstrumentName
Sitar :: InstrumentName
Banjo :: InstrumentName
Shamisen :: InstrumentName
Koto :: InstrumentName
Kalimba :: InstrumentName
Bagpipe :: InstrumentName
Fiddle :: InstrumentName
Shanai :: InstrumentName
TinkleBell :: InstrumentName
Agogo :: InstrumentName
SteelDrums :: InstrumentName
Woodblock :: InstrumentName
TaikoDrum :: InstrumentName
MelodicDrum :: InstrumentName
SynthDrum :: InstrumentName
ReverseCymbal :: InstrumentName
GuitarFretNoise :: InstrumentName
BreathNoise :: InstrumentName
Seashore :: InstrumentName
BirdTweet :: InstrumentName
TelephoneRing :: InstrumentName
Helicopter :: InstrumentName
Applause :: InstrumentName
Gunshot :: InstrumentName
Percussion :: InstrumentName
CustomInstrument :: String -> InstrumentName
data PhraseAttribute
Dyn :: Dynamic -> PhraseAttribute
Tmp :: Tempo -> PhraseAttribute
Art :: Articulation -> PhraseAttribute
Orn :: Ornament -> PhraseAttribute
data Dynamic
Accent :: Rational -> Dynamic
Crescendo :: Rational -> Dynamic
Diminuendo :: Rational -> Dynamic
StdLoudness :: StdLoudness -> Dynamic
Loudness :: Rational -> Dynamic
data StdLoudness
PPP :: StdLoudness
PP :: StdLoudness
P :: StdLoudness
MP :: StdLoudness
SF :: StdLoudness
MF :: StdLoudness
NF :: StdLoudness
FF :: StdLoudness
FFF :: StdLoudness
data Tempo
Ritardando :: Rational -> Tempo
Accelerando :: Rational -> Tempo
data Articulation
Staccato :: Rational -> Articulation
Legato :: Rational -> Articulation
Slurred :: Rational -> Articulation
Tenuto :: Articulation
Marcato :: Articulation
Pedal :: Articulation
Fermata :: Articulation
FermataDown :: Articulation
Breath :: Articulation
DownBow :: Articulation
UpBow :: Articulation
Harmonic :: Articulation
Pizzicato :: Articulation
LeftPizz :: Articulation
BartokPizz :: Articulation
Swell :: Articulation
Wedge :: Articulation
Thumb :: Articulation
Stopped :: Articulation
data Ornament
Trill :: Ornament
Mordent :: Ornament
InvMordent :: Ornament
DoubleMordent :: Ornament
Turn :: Ornament
TrilledTurn :: Ornament
ShortTrill :: Ornament
Arpeggio :: Ornament
ArpeggioUp :: Ornament
ArpeggioDown :: Ornament
Instruction :: String -> Ornament
Head :: NoteHead -> Ornament
DiatonicTrans :: Int -> Ornament
data NoteHead
DiamondHead :: NoteHead
SquareHead :: NoteHead
XHead :: NoteHead
TriangleHead :: NoteHead
TremoloHead :: NoteHead
SlashHead :: NoteHead
ArtHarmonic :: NoteHead
NoHead :: NoteHead
type Volume = Int
addVolume :: Volume -> Music Pitch -> Music (Pitch, Volume)
data NoteAttribute
Volume :: Int -> NoteAttribute
Fingering :: Integer -> NoteAttribute
Dynamics :: String -> NoteAttribute
Params :: [Double] -> NoteAttribute
type Note1 = (Pitch, [NoteAttribute])
type Music1 = Music Note1
class ToMusic1 a
toMusic1 :: ToMusic1 a => Music a -> Music1
note :: Dur -> a -> Music a
rest :: Dur -> Music a
tempo :: Dur -> Music a -> Music a
transpose :: AbsPitch -> Music a -> Music a
instrument :: InstrumentName -> Music a -> Music a
phrase :: [PhraseAttribute] -> Music a -> Music a
keysig :: PitchClass -> Mode -> Music a -> Music a
cff :: Octave -> Dur -> Music Pitch
cf :: Octave -> Dur -> Music Pitch
c :: Octave -> Dur -> Music Pitch
cs :: Octave -> Dur -> Music Pitch
css :: Octave -> Dur -> Music Pitch
dff :: Octave -> Dur -> Music Pitch
df :: Octave -> Dur -> Music Pitch
d :: Octave -> Dur -> Music Pitch
ds :: Octave -> Dur -> Music Pitch
dss :: Octave -> Dur -> Music Pitch
eff :: Octave -> Dur -> Music Pitch
ef :: Octave -> Dur -> Music Pitch
e :: Octave -> Dur -> Music Pitch
es :: Octave -> Dur -> Music Pitch
ess :: Octave -> Dur -> Music Pitch
fff :: Octave -> Dur -> Music Pitch
ff :: Octave -> Dur -> Music Pitch
f :: Octave -> Dur -> Music Pitch
fs :: Octave -> Dur -> Music Pitch
fss :: Octave -> Dur -> Music Pitch
gff :: Octave -> Dur -> Music Pitch
gf :: Octave -> Dur -> Music Pitch
g :: Octave -> Dur -> Music Pitch
gs :: Octave -> Dur -> Music Pitch
gss :: Octave -> Dur -> Music Pitch
aff :: Octave -> Dur -> Music Pitch
af :: Octave -> Dur -> Music Pitch
a :: Octave -> Dur -> Music Pitch
as :: Octave -> Dur -> Music Pitch
ass :: Octave -> Dur -> Music Pitch
bff :: Octave -> Dur -> Music Pitch
bf :: Octave -> Dur -> Music Pitch
b :: Octave -> Dur -> Music Pitch
bs :: Octave -> Dur -> Music Pitch
bss :: Octave -> Dur -> Music Pitch
bn :: Dur
wn :: Dur
hn :: Dur
qn :: Dur
en :: Dur
sn :: Dur
tn :: Dur
sfn :: Dur
dwn :: Dur
dhn :: Dur
dqn :: Dur
den :: Dur
dsn :: Dur
dtn :: Dur
ddhn :: Dur
ddqn :: Dur
dden :: Dur
bnr :: Music Pitch
wnr :: Music Pitch
hnr :: Music Pitch
qnr :: Music Pitch
enr :: Music Pitch
snr :: Music Pitch
tnr :: Music Pitch
sfnr :: Music Pitch
dwnr :: Music Pitch
dhnr :: Music Pitch
dqnr :: Music Pitch
denr :: Music Pitch
dsnr :: Music Pitch
dtnr :: Music Pitch
ddhnr :: Music Pitch
ddqnr :: Music Pitch
ddenr :: Music Pitch
absPitch :: Pitch -> AbsPitch
pcToInt :: PitchClass -> Int
pitch :: AbsPitch -> Pitch
trans :: Int -> Pitch -> Pitch
line :: [Music a] -> Music a
chord :: [Music a] -> Music a
line1 :: [Music a] -> Music a
chord1 :: [Music a] -> Music a
offset :: Dur -> Music a -> Music a
times :: Int -> Music a -> Music a
forever :: Music a -> Music a
lineToList :: Music a -> [Music a]
invertAt :: Pitch -> Music Pitch -> Music Pitch
invertAt1 :: Pitch -> Music (Pitch, a) -> Music (Pitch, a)
invert :: Music Pitch -> Music Pitch
invert1 :: Music (Pitch, a) -> Music (Pitch, a)
retro :: Music a -> Music a
retroInvert :: Music Pitch -> Music Pitch
invertRetro :: Music Pitch -> Music Pitch
dur :: Music a -> Dur
cut :: Dur -> Music a -> Music a
remove :: Dur -> Music a -> Music a
removeZeros :: Music a -> Music a
type LazyDur = [Dur]
durL :: Music a -> LazyDur
mergeLD :: LazyDur -> LazyDur -> LazyDur
minL :: LazyDur -> Dur -> Dur
cutL :: LazyDur -> Music a -> Music a
(/=:) :: Music a -> Music a -> Music a
data PercussionSound
AcousticBassDrum :: PercussionSound
BassDrum1 :: PercussionSound
SideStick :: PercussionSound
AcousticSnare :: PercussionSound
HandClap :: PercussionSound
ElectricSnare :: PercussionSound
LowFloorTom :: PercussionSound
ClosedHiHat :: PercussionSound
HighFloorTom :: PercussionSound
PedalHiHat :: PercussionSound
LowTom :: PercussionSound
OpenHiHat :: PercussionSound
LowMidTom :: PercussionSound
HiMidTom :: PercussionSound
CrashCymbal1 :: PercussionSound
HighTom :: PercussionSound
RideCymbal1 :: PercussionSound
ChineseCymbal :: PercussionSound
RideBell :: PercussionSound
Tambourine :: PercussionSound
SplashCymbal :: PercussionSound
Cowbell :: PercussionSound
CrashCymbal2 :: PercussionSound
Vibraslap :: PercussionSound
RideCymbal2 :: PercussionSound
HiBongo :: PercussionSound
LowBongo :: PercussionSound
MuteHiConga :: PercussionSound
OpenHiConga :: PercussionSound
LowConga :: PercussionSound
HighTimbale :: PercussionSound
LowTimbale :: PercussionSound
HighAgogo :: PercussionSound
LowAgogo :: PercussionSound
Cabasa :: PercussionSound
Maracas :: PercussionSound
ShortWhistle :: PercussionSound
LongWhistle :: PercussionSound
ShortGuiro :: PercussionSound
LongGuiro :: PercussionSound
Claves :: PercussionSound
HiWoodBlock :: PercussionSound
LowWoodBlock :: PercussionSound
MuteCuica :: PercussionSound
OpenCuica :: PercussionSound
MuteTriangle :: PercussionSound
OpenTriangle :: PercussionSound
perc :: PercussionSound -> Dur -> Music Pitch
pMap :: (a -> b) -> Primitive a -> Primitive b
mMap :: (a -> b) -> Music a -> Music b
mFold :: (Primitive a -> b) -> (b -> b -> b) -> (b -> b -> b) -> (Control -> b -> b) -> Music a -> b
shiftPitches :: AbsPitch -> Music Pitch -> Music Pitch
shiftPitches1 :: AbsPitch -> Music (Pitch, b) -> Music (Pitch, b)
scaleDurations :: Rational -> Music a -> Music a
changeInstrument :: InstrumentName -> Music a -> Music a
removeInstruments :: Music a -> Music a
instance GHC.Enum.Enum Euterpea.Music.PercussionSound
instance GHC.Classes.Ord Euterpea.Music.PercussionSound
instance GHC.Classes.Eq Euterpea.Music.PercussionSound
instance GHC.Show.Show Euterpea.Music.PercussionSound
instance GHC.Show.Show Euterpea.Music.NoteAttribute
instance GHC.Classes.Eq Euterpea.Music.NoteAttribute
instance GHC.Classes.Ord a => GHC.Classes.Ord (Euterpea.Music.Music a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Euterpea.Music.Music a)
instance GHC.Show.Show a => GHC.Show.Show (Euterpea.Music.Music a)
instance GHC.Classes.Ord Euterpea.Music.Control
instance GHC.Classes.Eq Euterpea.Music.Control
instance GHC.Show.Show Euterpea.Music.Control
instance GHC.Classes.Ord Euterpea.Music.PhraseAttribute
instance GHC.Classes.Eq Euterpea.Music.PhraseAttribute
instance GHC.Show.Show Euterpea.Music.PhraseAttribute
instance GHC.Classes.Ord Euterpea.Music.Ornament
instance GHC.Classes.Eq Euterpea.Music.Ornament
instance GHC.Show.Show Euterpea.Music.Ornament
instance GHC.Classes.Ord Euterpea.Music.NoteHead
instance GHC.Classes.Eq Euterpea.Music.NoteHead
instance GHC.Show.Show Euterpea.Music.NoteHead
instance GHC.Classes.Ord Euterpea.Music.Articulation
instance GHC.Classes.Eq Euterpea.Music.Articulation
instance GHC.Show.Show Euterpea.Music.Articulation
instance GHC.Classes.Ord Euterpea.Music.Tempo
instance GHC.Classes.Eq Euterpea.Music.Tempo
instance GHC.Show.Show Euterpea.Music.Tempo
instance GHC.Classes.Ord Euterpea.Music.Dynamic
instance GHC.Classes.Eq Euterpea.Music.Dynamic
instance GHC.Show.Show Euterpea.Music.Dynamic
instance GHC.Enum.Enum Euterpea.Music.StdLoudness
instance GHC.Classes.Ord Euterpea.Music.StdLoudness
instance GHC.Classes.Eq Euterpea.Music.StdLoudness
instance GHC.Show.Show Euterpea.Music.StdLoudness
instance GHC.Classes.Ord Euterpea.Music.InstrumentName
instance GHC.Classes.Eq Euterpea.Music.InstrumentName
instance GHC.Show.Show Euterpea.Music.InstrumentName
instance GHC.Classes.Ord Euterpea.Music.Mode
instance GHC.Classes.Eq Euterpea.Music.Mode
instance GHC.Show.Show Euterpea.Music.Mode
instance GHC.Classes.Ord a => GHC.Classes.Ord (Euterpea.Music.Primitive a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Euterpea.Music.Primitive a)
instance GHC.Show.Show a => GHC.Show.Show (Euterpea.Music.Primitive a)
instance GHC.Enum.Bounded Euterpea.Music.PitchClass
instance GHC.Enum.Enum Euterpea.Music.PitchClass
instance GHC.Read.Read Euterpea.Music.PitchClass
instance GHC.Classes.Ord Euterpea.Music.PitchClass
instance GHC.Classes.Eq Euterpea.Music.PitchClass
instance GHC.Show.Show Euterpea.Music.PitchClass
instance Euterpea.Music.ToMusic1 Euterpea.Music.Pitch
instance Euterpea.Music.ToMusic1 (Euterpea.Music.Pitch, Euterpea.Music.Volume)
instance Euterpea.Music.ToMusic1 Euterpea.Music.Note1
instance Euterpea.Music.ToMusic1 Euterpea.Music.AbsPitch
instance GHC.Base.Functor Euterpea.Music.Primitive
instance GHC.Base.Functor Euterpea.Music.Music

module Euterpea.IO.MIDI.MidiIO
getAllDevices :: IO ([(InputDeviceID, DeviceInfo)], [(OutputDeviceID, DeviceInfo)])
terminateMidi :: IO ()
initializeMidi :: IO ()
outputMidi :: OutputDeviceID -> IO ()
deliverMidiEvent :: OutputDeviceID -> MidiEvent -> IO ()
pollMidi :: InputDeviceID -> IO (Maybe (Time, [Message]))
defaultOutput :: (OutputDeviceID -> a -> IO b) -> a -> IO b
defaultInput :: (InputDeviceID -> a -> IO b) -> a -> IO b
playMidi :: OutputDeviceID -> Midi -> IO ()
data MidiMessage
ANote :: !Channel -> !Key -> !Velocity -> !Time -> MidiMessage
Std :: Message -> MidiMessage
getTimeNow :: IO Time
data DeviceInfo :: *
DeviceInfo :: String -> String -> Bool -> Bool -> Bool -> DeviceInfo
[interface] :: DeviceInfo -> String
[name] :: DeviceInfo -> String
[input] :: DeviceInfo -> Bool
[output] :: DeviceInfo -> Bool
[opened] :: DeviceInfo -> Bool
data InputDeviceID
data OutputDeviceID
data Message :: *
NoteOff :: ~Channel -> ~Key -> ~Velocity -> Message
[channel] :: Message -> ~Channel
[key] :: Message -> ~Key
[velocity] :: Message -> ~Velocity
NoteOn :: ~Channel -> ~Key -> ~Velocity -> Message
[channel] :: Message -> ~Channel
[key] :: Message -> ~Key
[velocity] :: Message -> ~Velocity
KeyPressure :: ~Channel -> ~Key -> ~Pressure -> Message
[channel] :: Message -> ~Channel
[key] :: Message -> ~Key
[pressure] :: Message -> ~Pressure
ControlChange :: ~Channel -> ~Int -> ~Int -> Message
[channel] :: Message -> ~Channel
[controllerNumber] :: Message -> ~Int
[controllerValue] :: Message -> ~Int
ProgramChange :: ~Channel -> ~Preset -> Message
[channel] :: Message -> ~Channel
[preset] :: Message -> ~Preset
ChannelPressure :: ~Channel -> ~Pressure -> Message
[channel] :: Message -> ~Channel
[pressure] :: Message -> ~Pressure
PitchWheel :: ~Channel -> ~PitchWheel -> Message
[channel] :: Message -> ~Channel
[pitchWheel] :: Message -> ~PitchWheel
SequenceNumber :: ~Int -> Message
Text :: ~String -> Message
Copyright :: ~String -> Message
TrackName :: ~String -> Message
InstrumentName :: ~String -> Message
Lyrics :: ~String -> Message
Marker :: ~String -> Message
CuePoint :: ~String -> Message
ChannelPrefix :: ~Channel -> Message
ProgramName :: ~String -> Message
DeviceName :: ~String -> Message
TrackEnd :: Message
TempoChange :: ~Tempo -> Message
SMPTEOffset :: ~Int -> ~Int -> ~Int -> ~Int -> ~Int -> Message
TimeSignature :: ~Int -> ~Int -> ~Int -> ~Int -> Message
KeySignature :: ~Int -> ~Int -> Message
Reserved :: ~Int -> ~ByteString -> Message
Sysex :: ~Int -> ~ByteString -> Message
type Time = Double
unsafeInputID :: Int -> InputDeviceID
unsafeOutputID :: Int -> OutputDeviceID
instance Control.DeepSeq.NFData Euterpea.IO.MIDI.MidiIO.OutputDeviceID
instance GHC.Show.Show Euterpea.IO.MIDI.MidiIO.OutputDeviceID
instance GHC.Classes.Eq Euterpea.IO.MIDI.MidiIO.OutputDeviceID
instance Control.DeepSeq.NFData Euterpea.IO.MIDI.MidiIO.InputDeviceID
instance GHC.Show.Show Euterpea.IO.MIDI.MidiIO.InputDeviceID
instance GHC.Classes.Eq Euterpea.IO.MIDI.MidiIO.InputDeviceID
instance GHC.Show.Show Euterpea.IO.MIDI.MidiIO.MidiMessage

module Euterpea.IO.MIDI.MEvent
data MEvent
MEvent :: PTime -> InstrumentName -> AbsPitch -> DurT -> Volume -> [Double] -> MEvent
[eTime] :: MEvent -> PTime
[eInst] :: MEvent -> InstrumentName
[ePitch] :: MEvent -> AbsPitch
[eDur] :: MEvent -> DurT
[eVol] :: MEvent -> Volume
[eParams] :: MEvent -> [Double]
type Performance = [MEvent]
type PTime = Rational
type DurT = Rational
merge :: Performance -> Performance -> Performance
data MContext
MContext :: PTime -> InstrumentName -> DurT -> Volume -> MContext
[mcTime] :: MContext -> PTime
[mcInst] :: MContext -> InstrumentName
[mcDur] :: MContext -> DurT
[mcVol] :: MContext -> Volume
perform :: (ToMusic1 a) => Music a -> Performance
perform1 :: Music1 -> Performance
perform1Dur :: Music1 -> (Performance, DurT)
applyControls :: Music1 -> Music1
musicToMEvents :: MContext -> Music1 -> (Performance, DurT)
noteToMEvent :: MContext -> Dur -> (Pitch, [NoteAttribute]) -> MEvent
phraseToMEvents :: MContext -> [PhraseAttribute] -> Music1 -> (Performance, DurT)
instance GHC.Show.Show Euterpea.IO.MIDI.MEvent.MContext
instance GHC.Classes.Ord Euterpea.IO.MIDI.MEvent.MEvent
instance GHC.Classes.Eq Euterpea.IO.MIDI.MEvent.MEvent
instance GHC.Show.Show Euterpea.IO.MIDI.MEvent.MEvent

module Euterpea.IO.MIDI.GeneralMidi
fromGM :: Int -> InstrumentName
toGM :: InstrumentName -> Int
instance GHC.Enum.Enum Euterpea.Music.InstrumentName

module Euterpea.IO.MIDI.ExportMidiFile
exportMidiFile :: FilePath -> Midi -> IO ()

module Euterpea.IO.MIDI.ToMidi
type ProgNum = Int
type UserPatchMap = [(InstrumentName, Channel)]
makeGMMap :: [InstrumentName] -> UserPatchMap
upmLookup :: UserPatchMap -> InstrumentName -> (Channel, ProgNum)
toMidi :: [MEvent] -> Midi
toMidiUPM :: UserPatchMap -> [MEvent] -> Midi
division :: Int
allValid :: UserPatchMap -> [InstrumentName] -> Bool
lookupB :: UserPatchMap -> InstrumentName -> Bool
splitByInst :: [MEvent] -> [(InstrumentName, [MEvent])]
type MidiEvent = (Ticks, Message)
defST :: Tempo
mevsToMessages :: UserPatchMap -> (InstrumentName, [MEvent]) -> [MidiEvent]
mkMEvents :: Channel -> MEvent -> (MidiEvent, MidiEvent)
toDelta :: (Integral b, RealFrac a) => a -> b
insertMEvent :: MidiEvent -> [MidiEvent] -> [MidiEvent]
defUpm :: UserPatchMap
writeMidi :: ToMusic1 a => FilePath -> Music a -> IO ()

module Euterpea.IO.MIDI.FromMidi
fromMidi :: Midi -> Music1
instance GHC.Show.Show Euterpea.IO.MIDI.FromMidi.SimpleMsg
instance GHC.Classes.Eq Euterpea.IO.MIDI.FromMidi.SimpleMsg
instance GHC.Classes.Ord Euterpea.IO.MIDI.FromMidi.NEvent
instance GHC.Show.Show Euterpea.IO.MIDI.FromMidi.NEvent
instance GHC.Classes.Eq Euterpea.IO.MIDI.FromMidi.NEvent
instance GHC.Classes.Ord Euterpea.IO.MIDI.FromMidi.SimpleMsg

module Euterpea.IO.MIDI.Play
play :: (ToMusic1 a, NFData a) => Music a -> IO ()
playDev :: (ToMusic1 a, NFData a) => Int -> Music a -> IO ()
playS :: (ToMusic1 a, NFData a) => Music a -> IO ()
playDevS :: (ToMusic1 a, NFData a) => Int -> Music a -> IO ()
playC :: (ToMusic1 a, NFData a) => PlayParams -> Music a -> IO ()
devices :: IO ()
musicToMsgs' :: (ToMusic1 a) => PlayParams -> Music a -> [(Time, MidiMessage)]
linearCP :: NumChannels -> PercChan -> ChannelMapFun
dynamicCP :: NumChannels -> PercChan -> ChannelMapFun
predefinedCP :: ChannelMap -> ChannelMapFun
defParams :: PlayParams
playM' :: Maybe OutputDeviceID -> Midi -> IO ()
data PlayParams
PlayParams :: Bool -> ChannelMapFun -> Maybe OutputDeviceID -> Time -> (Music1 -> [MEvent]) -> PlayParams
[strict] :: PlayParams -> Bool
[chanPolicy] :: PlayParams -> ChannelMapFun
[devID] :: PlayParams -> Maybe OutputDeviceID
[closeDelay] :: PlayParams -> Time
[perfAlg] :: PlayParams -> Music1 -> [MEvent]
type ChannelMapFun = InstrumentName -> ChannelMap -> (Channel, ChannelMap)
type ChannelMap = [(InstrumentName, Channel)]
instance Control.DeepSeq.NFData Codec.Midi.FileType
instance Control.DeepSeq.NFData Codec.Midi.TimeDiv
instance Control.DeepSeq.NFData Codec.Midi.Midi
instance Control.DeepSeq.NFData Codec.Midi.Message
instance Control.DeepSeq.NFData Euterpea.IO.MIDI.MidiIO.MidiMessage
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (Euterpea.Music.Music a)
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (Euterpea.Music.Primitive a)
instance Control.DeepSeq.NFData Euterpea.Music.Control
instance Control.DeepSeq.NFData Euterpea.Music.PitchClass
instance Control.DeepSeq.NFData Euterpea.Music.Mode
instance Control.DeepSeq.NFData Euterpea.Music.PhraseAttribute
instance Control.DeepSeq.NFData Euterpea.Music.Dynamic
instance Control.DeepSeq.NFData Euterpea.Music.StdLoudness
instance Control.DeepSeq.NFData Euterpea.Music.Articulation
instance Control.DeepSeq.NFData Euterpea.Music.Ornament
instance Control.DeepSeq.NFData Euterpea.Music.Tempo
instance Control.DeepSeq.NFData Euterpea.Music.InstrumentName
instance Control.DeepSeq.NFData Euterpea.Music.NoteAttribute

module Euterpea.IO.MIDI
fromMidi :: Midi -> Music1
defaultOutput :: (OutputDeviceID -> a -> IO b) -> a -> IO b
defaultInput :: (InputDeviceID -> a -> IO b) -> a -> IO b
playMidi :: OutputDeviceID -> Midi -> IO ()
data MidiMessage
ANote :: !Channel -> !Key -> !Velocity -> !Time -> MidiMessage
Std :: Message -> MidiMessage
data Message :: *
NoteOff :: ~Channel -> ~Key -> ~Velocity -> Message
[channel] :: Message -> ~Channel
[key] :: Message -> ~Key
[velocity] :: Message -> ~Velocity
NoteOn :: ~Channel -> ~Key -> ~Velocity -> Message
[channel] :: Message -> ~Channel
[key] :: Message -> ~Key
[velocity] :: Message -> ~Velocity
KeyPressure :: ~Channel -> ~Key -> ~Pressure -> Message
[channel] :: Message -> ~Channel
[key] :: Message -> ~Key
[pressure] :: Message -> ~Pressure
ControlChange :: ~Channel -> ~Int -> ~Int -> Message
[channel] :: Message -> ~Channel
[controllerNumber] :: Message -> ~Int
[controllerValue] :: Message -> ~Int
ProgramChange :: ~Channel -> ~Preset -> Message
[channel] :: Message -> ~Channel
[preset] :: Message -> ~Preset
ChannelPressure :: ~Channel -> ~Pressure -> Message
[channel] :: Message -> ~Channel
[pressure] :: Message -> ~Pressure
PitchWheel :: ~Channel -> ~PitchWheel -> Message
[channel] :: Message -> ~Channel
[pitchWheel] :: Message -> ~PitchWheel
SequenceNumber :: ~Int -> Message
Text :: ~String -> Message
Copyright :: ~String -> Message
TrackName :: ~String -> Message
InstrumentName :: ~String -> Message
Lyrics :: ~String -> Message
Marker :: ~String -> Message
CuePoint :: ~String -> Message
ChannelPrefix :: ~Channel -> Message
ProgramName :: ~String -> Message
DeviceName :: ~String -> Message
TrackEnd :: Message
TempoChange :: ~Tempo -> Message
SMPTEOffset :: ~Int -> ~Int -> ~Int -> ~Int -> ~Int -> Message
TimeSignature :: ~Int -> ~Int -> ~Int -> ~Int -> Message
KeySignature :: ~Int -> ~Int -> Message
Reserved :: ~Int -> ~ByteString -> Message
Sysex :: ~Int -> ~ByteString -> Message
data DeviceInfo :: *
DeviceInfo :: String -> String -> Bool -> Bool -> Bool -> DeviceInfo
[interface] :: DeviceInfo -> String
[name] :: DeviceInfo -> String
[input] :: DeviceInfo -> Bool
[output] :: DeviceInfo -> Bool
[opened] :: DeviceInfo -> Bool
data OutputDeviceID
data InputDeviceID

module Control.Arrow.ArrowP
newtype ArrowP a p b c
ArrowP :: a b c -> ArrowP a p b c
[strip] :: ArrowP a p b c -> a b c
instance Control.Category.Category a => Control.Category.Category (Control.Arrow.ArrowP.ArrowP a p)
instance Control.Arrow.Arrow a => Control.Arrow.Arrow (Control.Arrow.ArrowP.ArrowP a p)
instance Control.Arrow.ArrowLoop a => Control.Arrow.ArrowLoop (Control.Arrow.ArrowP.ArrowP a p)
instance Control.Arrow.Operations.ArrowCircuit a => Control.Arrow.Operations.ArrowCircuit (Control.Arrow.ArrowP.ArrowP a p)
instance Control.Arrow.ArrowChoice a => Control.Arrow.ArrowChoice (Control.Arrow.ArrowP.ArrowP a p)

module Control.SF.SF
newtype SF a b
SF :: (a -> (b, SF a b)) -> SF a b
[runSF] :: SF a b -> (a -> (b, SF a b))
run :: SF a b -> [a] -> [b]
unfold :: SF () a -> [a]
nth :: Int -> SF () a -> a
nth' :: Int -> (b, ((), b) -> (a, b)) -> a
instance Control.Category.Category Control.SF.SF.SF
instance Control.Arrow.Arrow Control.SF.SF.SF
instance Control.Arrow.ArrowLoop Control.SF.SF.SF
instance Control.Arrow.ArrowChoice Control.SF.SF.SF
instance Control.Arrow.Operations.ArrowCircuit Control.SF.SF.SF

module Euterpea.IO.Audio.Types
class Clock p
rate :: Clock p => p -> Double
data AudRate
data CtrRate
type AudSF a b = SigFun AudRate a b
type CtrSF a b = SigFun CtrRate a b
type Signal clk a b = ArrowP SF clk a b
type SigFun clk a b = ArrowP SF clk a b
class AudioSample a
zero :: AudioSample a => a
mix :: AudioSample a => a -> a -> a
collapse :: AudioSample a => a -> [Double]
numChans :: AudioSample a => a -> Int
type Mono p = Signal p () Double
type Stereo p = Signal p () (Double, Double)
instance Euterpea.IO.Audio.Types.Clock Euterpea.IO.Audio.Types.AudRate
instance Euterpea.IO.Audio.Types.Clock Euterpea.IO.Audio.Types.CtrRate
instance Euterpea.IO.Audio.Types.AudioSample GHC.Types.Double
instance Euterpea.IO.Audio.Types.AudioSample (GHC.Types.Double, GHC.Types.Double)

module Euterpea.IO.Audio.Basics
outA :: (Arrow a) => a b b
integral :: forall a p. (ArrowCircuit a, Clock p) => ArrowP a p Double Double
countDown :: ArrowCircuit a => Int -> a () Int
countUp :: ArrowCircuit a => a () Int
upsample :: forall a b c p1 p2. (ArrowChoice a, ArrowCircuit a, Clock p1, Clock p2, AudioSample c) => ArrowP a p1 b c -> ArrowP a p2 b c

-- | Converting from a Pitch value to Hz:
pchToHz :: Floating a => Pitch -> a

-- | Converting an AbsPitch to hertz (cycles per second):
apToHz :: Floating a => AbsPitch -> a

module Euterpea.IO.Audio.BasicSigFuns
data Table
pluck :: forall p. Clock p => Table -> Double -> PluckDecayMethod -> Signal p Double Double
data PluckDecayMethod
SimpleAveraging :: PluckDecayMethod
StretchedAveraging :: Double -> PluckDecayMethod
SimpleDrum :: Double -> PluckDecayMethod
StretchedDrum :: Double -> Double -> PluckDecayMethod
WeightedAveraging :: Double -> Double -> PluckDecayMethod
RecursiveFilter :: PluckDecayMethod
balance :: forall p. Clock p => Int -> Signal p (Double, Double) Double
tableExponN :: TableSize -> StartPt -> [(SegLength, EndPt)] -> Table
tableExpon :: Int -> StartPt -> [(SegLength, EndPt)] -> Table
tableLinearN :: TableSize -> StartPt -> [(SegLength, EndPt)] -> Table
tableLinear :: Int -> StartPt -> [(SegLength, EndPt)] -> Table
tableSines3N :: TableSize -> [(PartialNum, PartialStrength, PhaseOffset)] -> Table
tableSines3 :: Int -> [(PartialNum, PartialStrength, PhaseOffset)] -> Table
tableSinesN :: TableSize -> [PartialStrength] -> Table
tableSines :: Int -> [Double] -> Table
tableBesselN :: TableSize -> Double -> Table
tableBessel :: Int -> Double -> Table
filterLowPass :: forall p. Clock p => Signal p (Double, Double) Double
filterHighPass :: Clock p => Signal p (Double, Double) Double
filterBandPass :: forall p. Clock p => Int -> Signal p (Double, Double, Double) Double
filterBandStop :: forall p. Clock p => Int -> Signal p (Double, Double, Double) Double
filterLowPassBW :: forall p. Clock p => Signal p (Double, Double) Double
filterHighPassBW :: forall p. Clock p => Signal p (Double, Double) Double
filterBandPassBW :: forall p. Clock p => Signal p (Double, Double, Double) Double
filterBandStopBW :: forall p. Clock p => Signal p (Double, Double, Double) Double
filterComb :: Clock p => Double -> Signal p (Double, Double) Double
osc :: (Clock p, ArrowCircuit a) => Table -> Double -> ArrowP a p Double Double
oscI :: (Clock p, ArrowCircuit a) => Table -> Double -> ArrowP a p Double Double
oscFixed :: forall p a. (Clock p, ArrowCircuit a) => Double -> ArrowP a p () Double
oscDur :: (Clock p, ArrowChoice a, ArrowCircuit a) => Table -> Double -> Double -> ArrowP a p () Double
oscDurI :: (Clock p, ArrowChoice a, ArrowCircuit a) => Table -> Double -> Double -> ArrowP a p () Double
oscPartials :: forall p. Clock p => Table -> Double -> Signal p (Double, Int) Double
envLine :: forall p. Clock p => Double -> Double -> Double -> Signal p () Double
envExpon :: forall p. Clock p => Double -> Double -> Double -> Signal p () Double
envLineSeg :: Clock p => [Double] -> [Double] -> Signal p () Double
envExponSeg :: Clock p => [Double] -> [Double] -> Signal p () Double
envASR :: (Clock p) => Double -> Double -> Double -> Signal p () Double
envCSEnvlpx :: forall p. Clock p => Double -> Double -> Double -> Table -> Double -> Double -> Signal p () Double
noiseWhite :: Int -> Signal p () Double
noiseBLI :: forall p. Clock p => Int -> Signal p Double Double
noiseBLH :: forall p. Clock p => Int -> Signal p Double Double
delayLine :: forall p. Clock p => Double -> Signal p Double Double
delayLine1 :: forall p. Clock p => Double -> Signal p (Double, Double) Double
delayLineT :: forall p. Clock p => Int -> Table -> Signal p Double Double
samples :: forall p. Clock p => Signal p () (SEvent ())
milliseconds :: Clock p => Signal p () (SEvent ())
seconds :: Clock p => Signal p () (SEvent ())
countTime :: Clock p => Int -> Signal p () (SEvent ()) -> Signal p () (SEvent ())
instance GHC.Show.Show Euterpea.IO.Audio.BasicSigFuns.Table

module Euterpea.IO.Audio.CSound
gen05 :: TableSize -> StartPt -> [(SegLength, EndPt)] -> Table
gen05' :: Int -> StartPt -> [(SegLength, EndPt)] -> Table
gen07 :: TableSize -> StartPt -> [(SegLength, EndPt)] -> Table
gen07' :: Int -> StartPt -> [(SegLength, EndPt)] -> Table
gen09 :: TableSize -> [(PartialNum, PartialStrength, PhaseOffset)] -> Table
gen09' :: Int -> [(PartialNum, PartialStrength, PhaseOffset)] -> Table
gen10 :: TableSize -> [PartialStrength] -> Table
gen10' :: Int -> [Double] -> Table
gen12 :: TableSize -> Double -> Table
gen12' :: Int -> Double -> Table
compSine1 :: TableSize -> [PartialStrength] -> Table
compSine2 :: TableSize -> [(PartialNum, PartialStrength, PhaseOffset)] -> Table
exponential1 :: TableSize -> StartPt -> [(SegLength, EndPt)] -> Table
lineSeg1 :: TableSize -> StartPt -> [(SegLength, EndPt)] -> Table
tone :: Clock p => Signal p (Double, Double) Double
atone :: Clock p => Signal p (Double, Double) Double
reson :: Clock p => Int -> Signal p (Double, Double, Double) Double
areson :: Clock p => Int -> Signal p (Double, Double, Double) Double
butterlp :: Clock p => Signal p (Double, Double) Double
butterhp :: Clock p => Signal p (Double, Double) Double
butterbp :: Clock p => Signal p (Double, Double, Double) Double
butterbr :: Clock p => Signal p (Double, Double, Double) Double
comb :: Clock p => Double -> Signal p (Double, Double) Double
oscil :: (ArrowCircuit a, Clock p) => Table -> Double -> ArrowP a p Double Double
oscili :: (ArrowCircuit a, Clock p) => Table -> Double -> ArrowP a p Double Double
oscils :: (ArrowCircuit a, Clock p) => Double -> ArrowP a p Double Double
oscil1 :: (ArrowCircuit a, ArrowChoice a, Clock p) => Table -> Double -> Double -> ArrowP a p Double Double
oscil1i :: (ArrowCircuit a, ArrowChoice a, Clock p) => Table -> Double -> Double -> ArrowP a p Double Double
buzz :: Clock p => Table -> Double -> Signal p (Double, Int) Double
line :: Clock p => Double -> Double -> Double -> ArrowP SF p Double Double
expon :: Clock p => Double -> Double -> Double -> ArrowP SF p Double Double
linseg :: Clock p => [Double] -> [Double] -> Signal p () Double
expseg :: Clock p => [Double] -> [Double] -> Signal p () Double
linen :: Clock p => Double -> Double -> Double -> ArrowP SF p Double Double
envlpx :: Clock p => Double -> Double -> Double -> Table -> Double -> Double -> ArrowP SF p Double Double
rand :: Int -> ArrowP SF p Double Double
randi :: Clock p => Int -> ArrowP SF p (Double, Double) Double
randh :: Clock p => Int -> ArrowP SF p (Double, Double) Double
delay :: Clock p => Double -> Signal p Double Double
vdelay :: Clock p => Double -> Signal p (Double, Double) Double
delay1 :: Clock p => Double -> Signal p (Double, Double) Double
delayT :: Clock p => Int -> Table -> Signal p Double Double

module Euterpea.IO.Audio.IO

-- | Writes sound to a wave file (.wav)
outFile :: forall a p. (AudioSample a, Clock p) => String -> Double -> Signal p () a -> IO ()

-- | Like outFile, but normalizes the output if the amplitude of the signal
--   goes above 1. If the maximum sample is less than or equal to 1, the
--   output is not normalized. Currently this requires storing the entire
--   output stream in memory before writing to the file.
outFileNorm :: forall a p. (AudioSample a, Clock p) => String -> Double -> Signal p () a -> IO ()

-- | Compute the maximum sample of an SF in the first <tt>dur</tt> seconds.
maxSample :: forall a p. (AudioSample a, Clock p) => Double -> Signal p () a -> Double

module Euterpea.IO.Audio.Render
type Instr a = Dur -> AbsPitch -> Volume -> [Double] -> a
type InstrMap a = [(InstrumentName, Instr a)]
renderSF :: (Clock p, ToMusic1 a, AudioSample b) => Music a -> InstrMap (Signal p () b) -> (Double, Signal p () b)

module Euterpea.IO.Audio
writeWav :: (ToMusic1 a1, Clock p, AudioSample a) => String -> InstrMap (Signal p () a) -> Music a1 -> IO ()
writeWavNorm :: (ToMusic1 a1, Clock p, AudioSample a) => String -> InstrMap (Signal p () a) -> Music a1 -> IO ()

module Euterpea
exportFile :: FilePath -> Midi -> IO ()
importFile :: FilePath -> IO (Either String Midi)
